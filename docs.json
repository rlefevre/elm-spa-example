[{"name":"Api","comment":" This module is responsible for communicating to the Conduit API.\n\nIt exposes an opaque Endpoint type which is guaranteed to point to the correct URL.\n\n\n# Cred\n\n@docs Cred, username\n\n\n# Persistence\n\n@docs storeCredWith, viewerChanges, logout\n\n\n# Application\n\n@docs application\n\n\n# HTTP\n\n@docs get, put, post, delete, login, register, settings\n\n\n# Errors\n\n@docs addServerError, decodeErrors\n\n","unions":[{"name":"Cred","comment":" The authentication credentials for the Viewer (that is, the currently logged-in user.)\n\nThis includes:\n\n  - The cred's Username\n  - The cred's authentication token\n\nBy design, there is no way to access the token directly as a String.\nIt can be encoded for persistence, and it can be added to a header\nto a HttpBuilder for a request, but that's it.\n\nThis token should never be rendered to the end user, and with this API, it\ncan't be!\n\n","args":[],"cases":[]}],"aliases":[],"values":[{"name":"addServerError","comment":" ","type":"List.List String.String -> List.List String.String"},{"name":"application","comment":" ","type":"Json.Decode.Decoder (Api.Cred -> viewer) -> { init : Maybe.Maybe viewer -> Url.Url -> Browser.Navigation.Key -> ( model, Platform.Cmd.Cmd msg ), onUrlChange : Url.Url -> msg, onUrlRequest : Browser.UrlRequest -> msg, subscriptions : model -> Platform.Sub.Sub msg, update : msg -> model -> ( model, Platform.Cmd.Cmd msg ), view : model -> Browser.Document msg } -> Platform.Program Json.Decode.Value model msg"},{"name":"decodeErrors","comment":" Many API endpoints include an \"errors\" field in their BadStatus responses.\n","type":"Http.Error -> List.List String.String"},{"name":"delete","comment":" ","type":"Api.Endpoint.Endpoint -> Api.Cred -> Http.Body -> Json.Decode.Decoder a -> Http.Request a"},{"name":"get","comment":" ","type":"Api.Endpoint.Endpoint -> Maybe.Maybe Api.Cred -> Json.Decode.Decoder a -> Http.Request a"},{"name":"login","comment":" ","type":"Http.Body -> Json.Decode.Decoder (Api.Cred -> a) -> Http.Request a"},{"name":"logout","comment":" ","type":"Platform.Cmd.Cmd msg"},{"name":"post","comment":" ","type":"Api.Endpoint.Endpoint -> Maybe.Maybe Api.Cred -> Http.Body -> Json.Decode.Decoder a -> Http.Request a"},{"name":"put","comment":" ","type":"Api.Endpoint.Endpoint -> Api.Cred -> Http.Body -> Json.Decode.Decoder a -> Http.Request a"},{"name":"register","comment":" ","type":"Http.Body -> Json.Decode.Decoder (Api.Cred -> a) -> Http.Request a"},{"name":"settings","comment":" ","type":"Api.Cred -> Http.Body -> Json.Decode.Decoder (Api.Cred -> a) -> Http.Request a"},{"name":"storeCredWith","comment":" ","type":"Api.Cred -> Avatar.Avatar -> Platform.Cmd.Cmd msg"},{"name":"username","comment":" ","type":"Api.Cred -> Username.Username"},{"name":"viewerChanges","comment":" ","type":"(Maybe.Maybe viewer -> msg) -> Json.Decode.Decoder (Api.Cred -> viewer) -> Platform.Sub.Sub msg"}],"binops":[]},{"name":"Api.Endpoint","comment":"\n\n\n# Types\n\n@docs Endpoint\n\n\n# Endpoints\n\n@docs login, user, users, follow\n\n\n# Article Endpoints\n\n@docs article, articles, comment, comments, favorite, feed, profiles, request, tags\n\n","unions":[{"name":"Endpoint","comment":" Get a URL to the Conduit API.\n\nThis is not publicly exposed, because we want to make sure the only way to get one of these URLs is from this module.\n\n","args":[],"cases":[]}],"aliases":[],"values":[{"name":"article","comment":" ","type":"Article.Slug.Slug -> Api.Endpoint.Endpoint"},{"name":"articles","comment":" ","type":"List.List Url.Builder.QueryParameter -> Api.Endpoint.Endpoint"},{"name":"comment","comment":" ","type":"Article.Slug.Slug -> CommentId.CommentId -> Api.Endpoint.Endpoint"},{"name":"comments","comment":" ","type":"Article.Slug.Slug -> Api.Endpoint.Endpoint"},{"name":"favorite","comment":" ","type":"Article.Slug.Slug -> Api.Endpoint.Endpoint"},{"name":"feed","comment":" ","type":"List.List Url.Builder.QueryParameter -> Api.Endpoint.Endpoint"},{"name":"follow","comment":" ","type":"Username.Username -> Api.Endpoint.Endpoint"},{"name":"login","comment":" ","type":"Api.Endpoint.Endpoint"},{"name":"profiles","comment":" ","type":"Username.Username -> Api.Endpoint.Endpoint"},{"name":"request","comment":" Http.request, except it takes an Endpoint instead of a Url.\n","type":"{ body : Http.Body, expect : Http.Expect a, headers : List.List Http.Header, method : String.String, timeout : Maybe.Maybe Basics.Float, url : Api.Endpoint.Endpoint, withCredentials : Basics.Bool } -> Http.Request a"},{"name":"tags","comment":" ","type":"Api.Endpoint.Endpoint"},{"name":"user","comment":" ","type":"Api.Endpoint.Endpoint"},{"name":"users","comment":" ","type":"Api.Endpoint.Endpoint"}],"binops":[]},{"name":"Article","comment":" The interface to the Article data structure.\n\nThis includes:\n\n  - The Article type itself\n  - Ways to make HTTP requests to retrieve and modify articles\n  - Ways to access information about an article\n  - Converting between various types\n\n\n# Types\n\n@docs Article, Full, Preview\n\n\n# Info\n\n@docs author, body, metadata, slug\n\n\n# Transform\n\n@docs fromPreview, mapAuthor\n\n\n# Serialization\n\n@docs fullDecoder, previewDecoder\n\n\n# Single\n\n@docs fetch\n\n\n# Favorite\n\n@docs favorite, favoriteButton, unfavorite, unfavoriteButton\n\n","unions":[{"name":"Article","comment":" An article, optionally with an article body.\n\nTo see the difference between { extraInfo : a } and { extraInfo : Maybe Body },\nconsider the difference between the \"view individual article\" page (which\nrenders one article, including its body) and the \"article feed\" -\nwhich displays multiple articles, but without bodies.\n\nThis definition for `Article` means we can write:\n\nviewArticle : Article Full -> Html msg\nviewFeed : List (Article Preview) -> Html msg\n\nThis indicates that `viewArticle` requires an article _with a `body` present_,\nwereas `viewFeed` accepts articles with no bodies. (We could also have written\nit as `List (Article a)` to specify that feeds can accept either articles that\nhave `body` present or not. Either work, given that feeds do not attempt to\nread the `body` field from articles.)\n\nThis is an important distinction, because in Request.Article, the `feed`\nfunction produces `List (Article Preview)` because the API does not return bodies.\nThose articles are useful to the feed, but not to the individual article view.\n\n","args":["a"],"cases":[]},{"name":"Full","comment":" ","args":[],"cases":[]},{"name":"Preview","comment":" ","args":[],"cases":[]}],"aliases":[],"values":[{"name":"author","comment":" ","type":"Article.Article a -> Author.Author"},{"name":"body","comment":" ","type":"Article.Article Article.Full -> Article.Body.Body"},{"name":"favorite","comment":" ","type":"Article.Slug.Slug -> Api.Cred -> Http.Request (Article.Article Article.Preview)"},{"name":"favoriteButton","comment":" This is a \"build your own element\" API.\n\nYou pass it some configuration, followed by a `List (Attribute msg)` and a\n`List (Html msg)`, just like any standard Html element.\n\n","type":"Api.Cred -> msg -> List.List (Html.Attribute msg) -> List.List (Html.Html msg) -> Html.Html msg"},{"name":"fetch","comment":" ","type":"Maybe.Maybe Api.Cred -> Article.Slug.Slug -> Http.Request (Article.Article Article.Full)"},{"name":"fromPreview","comment":" ","type":"Article.Body.Body -> Article.Article Article.Preview -> Article.Article Article.Full"},{"name":"fullDecoder","comment":" ","type":"Maybe.Maybe Api.Cred -> Json.Decode.Decoder (Article.Article Article.Full)"},{"name":"mapAuthor","comment":" This is the only way you can transform an existing article:\nyou can change its author (e.g. to follow or unfollow them).\nAll other article data necessarily comes from the server!\n\nWe can tell this for sure by looking at the types of the exposed functions\nin this module.\n\n","type":"(Author.Author -> Author.Author) -> Article.Article a -> Article.Article a"},{"name":"metadata","comment":" ","type":"Article.Article a -> Article.Metadata"},{"name":"previewDecoder","comment":" ","type":"Maybe.Maybe Api.Cred -> Json.Decode.Decoder (Article.Article Article.Preview)"},{"name":"slug","comment":" ","type":"Article.Article a -> Article.Slug.Slug"},{"name":"unfavorite","comment":" ","type":"Article.Slug.Slug -> Api.Cred -> Http.Request (Article.Article Article.Preview)"},{"name":"unfavoriteButton","comment":" ","type":"Api.Cred -> msg -> List.List (Html.Attribute msg) -> List.List (Html.Html msg) -> Html.Html msg"}],"binops":[]},{"name":"Article.Body","comment":"\n\n\n# Types\n\n@docs Body, MarkdownString\n\n\n# Conversions\n\n@docs toHtml, toMarkdownString, decoder\n\n","unions":[{"name":"Body","comment":" ","args":[],"cases":[]}],"aliases":[{"name":"MarkdownString","comment":" Internal use only. I want to remind myself that the string inside Body contains markdown.\n","args":[],"type":"String.String"}],"values":[{"name":"decoder","comment":" ","type":"Json.Decode.Decoder Article.Body.Body"},{"name":"toHtml","comment":" ","type":"Article.Body.Body -> List.List (Html.Attribute msg) -> Html.Html msg"},{"name":"toMarkdownString","comment":" ","type":"Article.Body.Body -> Article.Body.MarkdownString"}],"binops":[]},{"name":"Article.Comment","comment":"\n\n@docs Comment, author, body, createdAt, delete, id, list, post\n\n","unions":[{"name":"Comment","comment":" ","args":[],"cases":[]}],"aliases":[],"values":[{"name":"author","comment":" ","type":"Article.Comment.Comment -> Author.Author"},{"name":"body","comment":" ","type":"Article.Comment.Comment -> String.String"},{"name":"createdAt","comment":" ","type":"Article.Comment.Comment -> Time.Posix"},{"name":"delete","comment":" ","type":"Article.Slug.Slug -> CommentId.CommentId -> Api.Cred -> Http.Request ()"},{"name":"id","comment":" ","type":"Article.Comment.Comment -> CommentId.CommentId"},{"name":"list","comment":" ","type":"Maybe.Maybe Api.Cred -> Article.Slug.Slug -> Http.Request (List.List Article.Comment.Comment)"},{"name":"post","comment":" ","type":"Article.Slug.Slug -> String.String -> Api.Cred -> Http.Request Article.Comment.Comment"}],"binops":[]},{"name":"Article.Feed","comment":" NOTE: This module has its own Model, view, and update. This is not normal!\nIf you find yourself doing this often, please watch <https://www.youtube.com/watch?v=DoA4Txr4GUs>\n\nThis is the reusable Article Feed that appears on both the Home page as well as\non the Profile page. There's a lot of logic here, so it's more convenient to use\nthe heavyweight approach of giving this its own Model, view, and update.\n\nThis means callers must use Html.map and Cmd.map to use this thing, but in\nthis case that's totally worth it because of the amount of logic wrapped up\nin this thing.\n\nFor every other reusable view in this application, this API would be totally\noverkill, so we use simpler APIs instead.\n\n@docs Model, Msg, decoder, init, update, viewArticles, viewPagination, viewTabs\n\n","unions":[{"name":"Model","comment":" ","args":[],"cases":[]},{"name":"Msg","comment":" ","args":[],"cases":[]}],"aliases":[],"values":[{"name":"decoder","comment":" ","type":"Maybe.Maybe Api.Cred -> Basics.Int -> Json.Decode.Decoder (PaginatedList.PaginatedList (Article.Article Article.Preview))"},{"name":"init","comment":" ","type":"Session.Session -> PaginatedList.PaginatedList (Article.Article Article.Preview) -> Article.Feed.Model"},{"name":"update","comment":" ","type":"Maybe.Maybe Api.Cred -> Article.Feed.Msg -> Article.Feed.Model -> ( Article.Feed.Model, Platform.Cmd.Cmd Article.Feed.Msg )"},{"name":"viewArticles","comment":" ","type":"Time.Zone -> Article.Feed.Model -> List.List (Html.Html Article.Feed.Msg)"},{"name":"viewPagination","comment":" ","type":"(Basics.Int -> msg) -> Basics.Int -> Article.Feed.Model -> Html.Html msg"},{"name":"viewTabs","comment":" ","type":"List.List ( String.String, msg ) -> ( String.String, msg ) -> List.List ( String.String, msg ) -> Html.Html msg"}],"binops":[]},{"name":"Article.Slug","comment":"\n\n\n# Types\n\n@docs Slug\n\n\n# Create\n\n@docs urlParser, decoder\n\n\n# Transform\n\n@docs toString\n\n","unions":[{"name":"Slug","comment":" ","args":[],"cases":[]}],"aliases":[],"values":[{"name":"decoder","comment":" ","type":"Json.Decode.Decoder Article.Slug.Slug"},{"name":"toString","comment":" ","type":"Article.Slug.Slug -> String.String"},{"name":"urlParser","comment":" ","type":"Url.Parser.Parser (Article.Slug.Slug -> a) a"}],"binops":[]},{"name":"Article.Tag","comment":"\n\n@docs Tag, list, toString\n\n","unions":[{"name":"Tag","comment":" ","args":[],"cases":[]}],"aliases":[],"values":[{"name":"list","comment":" ","type":"Http.Request (List.List Article.Tag.Tag)"},{"name":"toString","comment":" ","type":"Article.Tag.Tag -> String.String"}],"binops":[]},{"name":"Asset","comment":" Assets, such as images, videos, and audio. (We only have images for now.)\n\nWe should never expose asset URLs directly; this module should be in charge of\nall of them. One source of truth!\n\n\n# Images\n\n@docs Image, defaultAvatar, error, loading\n\n\n# Using images\n\n@docs src\n\n","unions":[{"name":"Image","comment":" ","args":[],"cases":[]}],"aliases":[],"values":[{"name":"defaultAvatar","comment":" ","type":"Asset.Image"},{"name":"error","comment":" ","type":"Asset.Image"},{"name":"loading","comment":" ","type":"Asset.Image"},{"name":"src","comment":" ","type":"Asset.Image -> Html.Attribute msg"}],"binops":[]},{"name":"Author","comment":" The author of an Article. It includes a Profile.\n\nI designed this to make sure the compiler would help me keep these three\npossibilities straight when displaying follow buttons and such:\n\n  - I'm following this author.\n  - I'm not following this author.\n  - I _can't_ follow this author, because it's me!\n\nTo do this, I defined `Author` a custom type with three variants, one for each\nof those possibilities.\n\nI also made separate types for FollowedAuthor and UnfollowedAuthor.\nThey are custom type wrappers around Profile, and thier sole purpose is to\nhelp me keep track of which operations are supported.\n\nFor example, consider these functions:\n\nrequestFollow : UnfollowedAuthor -> Cred -> Http.Request Author\nrequestUnfollow : FollowedAuthor -> Cred -> Http.Request Author\n\nThese types help the compiler prevent several mistakes:\n\n  - Displaying a Follow button for an author the user already follows.\n  - Displaying an Unfollow button for an author the user already doesn't follow.\n  - Displaying either button when the author is ourself.\n\nThere are still ways we could mess things up (e.g. make a button that calls Author.unfollow when you click it, but which displays \"Follow\" to the user) - but this rules out a bunch of potential problems.\n\n@docs Author, FollowedAuthor, UnfollowedAuthor\n@docs decoder, profile, username, view\n\n\n# Fetch\n\n@docs fetch\n\n\n# Following\n\n@docs follow, followButton, requestFollow, requestUnfollow, unfollow, unfollowButton\n\n","unions":[{"name":"Author","comment":" An author - either the current user, another user we're following, or\nanother user we aren't following.\n\nThese distinctions matter because we can only perform \"follow\" requests for\nusers we aren't following, we can only perform \"unfollow\" requests for\nusers we _are_ following, and we can't perform either for ourselves.\n\n","args":[],"cases":[["IsFollowing",["Author.FollowedAuthor"]],["IsNotFollowing",["Author.UnfollowedAuthor"]],["IsViewer",["Api.Cred","Profile.Profile"]]]},{"name":"FollowedAuthor","comment":" An author we're following.\n","args":[],"cases":[]},{"name":"UnfollowedAuthor","comment":" An author we're not following.\n","args":[],"cases":[]}],"aliases":[],"values":[{"name":"decoder","comment":" ","type":"Maybe.Maybe Api.Cred -> Json.Decode.Decoder Author.Author"},{"name":"fetch","comment":" ","type":"Username.Username -> Maybe.Maybe Api.Cred -> Http.Request Author.Author"},{"name":"follow","comment":" ","type":"Author.UnfollowedAuthor -> Author.FollowedAuthor"},{"name":"followButton","comment":" ","type":"(Api.Cred -> Author.UnfollowedAuthor -> msg) -> Api.Cred -> Author.UnfollowedAuthor -> Html.Html msg"},{"name":"profile","comment":" Return an Author's profile.\n","type":"Author.Author -> Profile.Profile"},{"name":"requestFollow","comment":" ","type":"Author.UnfollowedAuthor -> Api.Cred -> Http.Request Author.Author"},{"name":"requestUnfollow","comment":" ","type":"Author.FollowedAuthor -> Api.Cred -> Http.Request Author.Author"},{"name":"unfollow","comment":" ","type":"Author.FollowedAuthor -> Author.UnfollowedAuthor"},{"name":"unfollowButton","comment":" ","type":"(Api.Cred -> Author.FollowedAuthor -> msg) -> Api.Cred -> Author.FollowedAuthor -> Html.Html msg"},{"name":"username","comment":" Return an Author's username.\n","type":"Author.Author -> Username.Username"},{"name":"view","comment":" View an author. We basically render their username and a link to their\nprofile, and that's it.\n","type":"Username.Username -> Html.Html msg"}],"binops":[]},{"name":"Avatar","comment":"\n\n\n# Types\n\n@docs Avatar\n\n\n# Create\n\n@docs decoder\n\n\n# Transform\n\n@docs encode, src, toMaybeString\n\n","unions":[{"name":"Avatar","comment":" ","args":[],"cases":[]}],"aliases":[],"values":[{"name":"decoder","comment":" ","type":"Json.Decode.Decoder Avatar.Avatar"},{"name":"encode","comment":" ","type":"Avatar.Avatar -> Json.Encode.Value"},{"name":"src","comment":" ","type":"Avatar.Avatar -> Html.Attribute msg"},{"name":"toMaybeString","comment":" ","type":"Avatar.Avatar -> Maybe.Maybe String.String"}],"binops":[]},{"name":"CommentId","comment":"\n\n@docs CommentId, decoder, toString\n\n","unions":[{"name":"CommentId","comment":" ","args":[],"cases":[]}],"aliases":[],"values":[{"name":"decoder","comment":" ","type":"Json.Decode.Decoder CommentId.CommentId"},{"name":"toString","comment":" ","type":"CommentId.CommentId -> String.String"}],"binops":[]},{"name":"Email","comment":"\n\n@docs Email, decoder, encode, toString\n\n","unions":[{"name":"Email","comment":" An email address.\n\nHaving this as a custom type that's separate from String makes certain\nmistakes impossible. Consider this function:\n\nupdateEmailAddress : Email -> String -> Http.Request\nupdateEmailAddress email password = ...\n\n(The server needs your password to confirm that you should be allowed\nto update the email address.)\n\nBecause Email is not a type alias for String, but is instead a separate\ncustom type, it is now impossible to mix up the argument order of the\nemail and the password. If we do, it won't compile!\n\nIf Email were instead defined as `type alias Email = String`, we could\ncall updateEmailAddress password email and it would compile (and never\nwork properly).\n\nThis way, we make it impossible for a bug like that to compile!\n\n","args":[],"cases":[]}],"aliases":[],"values":[{"name":"decoder","comment":" ","type":"Json.Decode.Decoder Email.Email"},{"name":"encode","comment":" ","type":"Email.Email -> Json.Encode.Value"},{"name":"toString","comment":" ","type":"Email.Email -> String.String"}],"binops":[]},{"name":"Loading","comment":" A loading spinner icon.\n\n@docs error, icon, slowThreshold\n\n","unions":[],"aliases":[],"values":[{"name":"error","comment":" ","type":"String.String -> Html.Html msg"},{"name":"icon","comment":" ","type":"Html.Html msg"},{"name":"slowThreshold","comment":" ","type":"Task.Task x ()"}],"binops":[]},{"name":"Log","comment":" This is a placeholder API for how we might do logging through\nsome service like <http://rollbar.com> (which is what we use at work).\n\nWhenever you see Log.error used in this code base, it means\n\"Something unexpected happened. This is where we would log an\nerror to our server with some diagnostic info so we could investigate\nwhat happened later.\"\n\n(Since this is outside the scope of the RealWorld spec, and is only\na placeholder anyway, I didn't bother making this function accept actual\ndiagnostic info, authentication tokens, etc.)\n\n@docs error\n\n","unions":[],"aliases":[],"values":[{"name":"error","comment":" ","type":"Platform.Cmd.Cmd msg"}],"binops":[]},{"name":"Main","comment":"\n\n@docs main\n\n","unions":[],"aliases":[],"values":[{"name":"main","comment":" ","type":"Platform.Program Json.Decode.Value Main.Model Main.Msg"}],"binops":[]},{"name":"Page","comment":"\n\n@docs Page, view, viewErrors\n\n","unions":[{"name":"Page","comment":" Determines which navbar link (if any) will be rendered as active.\n\nNote that we don't enumerate every page here, because the navbar doesn't\nhave links for every page. Anything that's not part of the navbar falls\nunder Other.\n\n","args":[],"cases":[["Other",[]],["Home",[]],["Login",[]],["Register",[]],["Settings",[]],["Profile",["Username.Username"]],["NewArticle",[]]]}],"aliases":[],"values":[{"name":"view","comment":" Take a page's Html and frames it with a header and footer.\n\nThe caller provides the current user, so we can display in either\n\"signed in\" (rendering username) or \"signed out\" mode.\n\nisLoading is for determining whether we should show a loading spinner\nin the header. (This comes up during slow page transitions.)\n\n","type":"Maybe.Maybe Viewer.Viewer -> Page.Page -> { title : String.String, content : Html.Html msg } -> Browser.Document msg"},{"name":"viewErrors","comment":" Render dismissable errors. We use this all over the place!\n","type":"msg -> List.List String.String -> Html.Html msg"}],"binops":[]},{"name":"Page.Article","comment":" Viewing an individual article.\n\n@docs Model, Msg, init, subscriptions, toSession, update, view\n\n","unions":[{"name":"Msg","comment":" ","args":[],"cases":[]}],"aliases":[{"name":"Model","comment":" ","args":[],"type":"{ session : Session.Session, timeZone : Time.Zone, errors : List.List String.String, comments : Page.Article.Status ( Page.Article.CommentText, List.List Article.Comment.Comment ), article : Page.Article.Status (Article.Article Article.Full) }"}],"values":[{"name":"init","comment":" ","type":"Session.Session -> Article.Slug.Slug -> ( Page.Article.Model, Platform.Cmd.Cmd Page.Article.Msg )"},{"name":"subscriptions","comment":" ","type":"Page.Article.Model -> Platform.Sub.Sub Page.Article.Msg"},{"name":"toSession","comment":" ","type":"Page.Article.Model -> Session.Session"},{"name":"update","comment":" ","type":"Page.Article.Msg -> Page.Article.Model -> ( Page.Article.Model, Platform.Cmd.Cmd Page.Article.Msg )"},{"name":"view","comment":" ","type":"Page.Article.Model -> { title : String.String, content : Html.Html Page.Article.Msg }"}],"binops":[]},{"name":"Page.Article.Editor","comment":"\n\n@docs Model, Msg, initEdit, initNew, subscriptions, toSession, update, view\n\n","unions":[{"name":"Msg","comment":" ","args":[],"cases":[]}],"aliases":[{"name":"Model","comment":" ","args":[],"type":"{ session : Session.Session, status : Page.Article.Editor.Status }"}],"values":[{"name":"initEdit","comment":" ","type":"Session.Session -> Article.Slug.Slug -> ( Page.Article.Editor.Model, Platform.Cmd.Cmd Page.Article.Editor.Msg )"},{"name":"initNew","comment":" ","type":"Session.Session -> ( Page.Article.Editor.Model, Platform.Cmd.Cmd msg )"},{"name":"subscriptions","comment":" ","type":"Page.Article.Editor.Model -> Platform.Sub.Sub Page.Article.Editor.Msg"},{"name":"toSession","comment":" ","type":"Page.Article.Editor.Model -> Session.Session"},{"name":"update","comment":" ","type":"Page.Article.Editor.Msg -> Page.Article.Editor.Model -> ( Page.Article.Editor.Model, Platform.Cmd.Cmd Page.Article.Editor.Msg )"},{"name":"view","comment":" ","type":"Page.Article.Editor.Model -> { title : String.String, content : Html.Html Page.Article.Editor.Msg }"}],"binops":[]},{"name":"Page.Blank","comment":"\n\n@docs view\n\n","unions":[],"aliases":[],"values":[{"name":"view","comment":" ","type":"{ title : String.String, content : Html.Html msg }"}],"binops":[]},{"name":"Page.Home","comment":" The homepage. You can get here via either the / or /#/ routes.\n\n@docs Model, Msg, init, subscriptions, toSession, update, view\n\n","unions":[{"name":"Msg","comment":" ","args":[],"cases":[]}],"aliases":[{"name":"Model","comment":" ","args":[],"type":"{ session : Session.Session, timeZone : Time.Zone, feedTab : Page.Home.FeedTab, feedPage : Basics.Int, tags : Page.Home.Status (List.List Article.Tag.Tag), feed : Page.Home.Status Article.Feed.Model }"}],"values":[{"name":"init","comment":" ","type":"Session.Session -> ( Page.Home.Model, Platform.Cmd.Cmd Page.Home.Msg )"},{"name":"subscriptions","comment":" ","type":"Page.Home.Model -> Platform.Sub.Sub Page.Home.Msg"},{"name":"toSession","comment":" ","type":"Page.Home.Model -> Session.Session"},{"name":"update","comment":" ","type":"Page.Home.Msg -> Page.Home.Model -> ( Page.Home.Model, Platform.Cmd.Cmd Page.Home.Msg )"},{"name":"view","comment":" ","type":"Page.Home.Model -> { title : String.String, content : Html.Html Page.Home.Msg }"}],"binops":[]},{"name":"Page.Login","comment":" The login page.\n\n@docs Model, Msg, init, subscriptions, toSession, update, view\n\n","unions":[{"name":"Msg","comment":" ","args":[],"cases":[]}],"aliases":[{"name":"Model","comment":" ","args":[],"type":"{ session : Session.Session, problems : List.List Page.Login.Problem, form : Page.Login.Form }"}],"values":[{"name":"init","comment":" ","type":"Session.Session -> ( Page.Login.Model, Platform.Cmd.Cmd msg )"},{"name":"subscriptions","comment":" ","type":"Page.Login.Model -> Platform.Sub.Sub Page.Login.Msg"},{"name":"toSession","comment":" ","type":"Page.Login.Model -> Session.Session"},{"name":"update","comment":" ","type":"Page.Login.Msg -> Page.Login.Model -> ( Page.Login.Model, Platform.Cmd.Cmd Page.Login.Msg )"},{"name":"view","comment":" ","type":"Page.Login.Model -> { title : String.String, content : Html.Html Page.Login.Msg }"}],"binops":[]},{"name":"Page.NotFound","comment":"\n\n@docs view\n\n","unions":[],"aliases":[],"values":[{"name":"view","comment":" ","type":"{ title : String.String, content : Html.Html msg }"}],"binops":[]},{"name":"Page.Profile","comment":" An Author's profile.\n\n@docs Model, Msg, init, subscriptions, toSession, update, view\n\n","unions":[{"name":"Msg","comment":" ","args":[],"cases":[]}],"aliases":[{"name":"Model","comment":" ","args":[],"type":"{ session : Session.Session, timeZone : Time.Zone, errors : List.List String.String, feedTab : Page.Profile.FeedTab, feedPage : Basics.Int, author : Page.Profile.Status Author.Author, feed : Page.Profile.Status Article.Feed.Model }"}],"values":[{"name":"init","comment":" ","type":"Session.Session -> Username.Username -> ( Page.Profile.Model, Platform.Cmd.Cmd Page.Profile.Msg )"},{"name":"subscriptions","comment":" ","type":"Page.Profile.Model -> Platform.Sub.Sub Page.Profile.Msg"},{"name":"toSession","comment":" ","type":"Page.Profile.Model -> Session.Session"},{"name":"update","comment":" ","type":"Page.Profile.Msg -> Page.Profile.Model -> ( Page.Profile.Model, Platform.Cmd.Cmd Page.Profile.Msg )"},{"name":"view","comment":" ","type":"Page.Profile.Model -> { title : String.String, content : Html.Html Page.Profile.Msg }"}],"binops":[]},{"name":"Page.Register","comment":"\n\n@docs Model, Msg, init, subscriptions, toSession, update, view\n\n","unions":[{"name":"Msg","comment":" ","args":[],"cases":[]}],"aliases":[{"name":"Model","comment":" ","args":[],"type":"{ session : Session.Session, problems : List.List Page.Register.Problem, form : Page.Register.Form }"}],"values":[{"name":"init","comment":" ","type":"Session.Session -> ( Page.Register.Model, Platform.Cmd.Cmd msg )"},{"name":"subscriptions","comment":" ","type":"Page.Register.Model -> Platform.Sub.Sub Page.Register.Msg"},{"name":"toSession","comment":" ","type":"Page.Register.Model -> Session.Session"},{"name":"update","comment":" ","type":"Page.Register.Msg -> Page.Register.Model -> ( Page.Register.Model, Platform.Cmd.Cmd Page.Register.Msg )"},{"name":"view","comment":" ","type":"Page.Register.Model -> { title : String.String, content : Html.Html Page.Register.Msg }"}],"binops":[]},{"name":"Page.Settings","comment":"\n\n@docs Model, Msg, init, subscriptions, toSession, update, view\n\n","unions":[{"name":"Msg","comment":" ","args":[],"cases":[]}],"aliases":[{"name":"Model","comment":" ","args":[],"type":"{ session : Session.Session, problems : List.List Page.Settings.Problem, status : Page.Settings.Status }"}],"values":[{"name":"init","comment":" ","type":"Session.Session -> ( Page.Settings.Model, Platform.Cmd.Cmd Page.Settings.Msg )"},{"name":"subscriptions","comment":" ","type":"Page.Settings.Model -> Platform.Sub.Sub Page.Settings.Msg"},{"name":"toSession","comment":" ","type":"Page.Settings.Model -> Session.Session"},{"name":"update","comment":" ","type":"Page.Settings.Msg -> Page.Settings.Model -> ( Page.Settings.Model, Platform.Cmd.Cmd Page.Settings.Msg )"},{"name":"view","comment":" ","type":"Page.Settings.Model -> { title : String.String, content : Html.Html Page.Settings.Msg }"}],"binops":[]},{"name":"PaginatedList","comment":"\n\n@docs PaginatedList, fromList, map, params, total, values\n\n","unions":[{"name":"PaginatedList","comment":" ","args":["a"],"cases":[]}],"aliases":[],"values":[{"name":"fromList","comment":" ","type":"Basics.Int -> List.List a -> PaginatedList.PaginatedList a"},{"name":"map","comment":" ","type":"(a -> a) -> PaginatedList.PaginatedList a -> PaginatedList.PaginatedList a"},{"name":"params","comment":" I decided to accept a record here so I don't mess up the argument order of the two Ints.\n","type":"{ page : Basics.Int, resultsPerPage : Basics.Int } -> List.List Url.Builder.QueryParameter"},{"name":"total","comment":" ","type":"PaginatedList.PaginatedList a -> Basics.Int"},{"name":"values","comment":" ","type":"PaginatedList.PaginatedList a -> List.List a"}],"binops":[]},{"name":"Profile","comment":" A user's profile - potentially your own!\n\nContrast with Cred, which is the currently signed-in user.\n\n@docs Profile, avatar, bio, decoder\n\n","unions":[{"name":"Profile","comment":" ","args":[],"cases":[]}],"aliases":[],"values":[{"name":"avatar","comment":" ","type":"Profile.Profile -> Avatar.Avatar"},{"name":"bio","comment":" ","type":"Profile.Profile -> Maybe.Maybe String.String"},{"name":"decoder","comment":" ","type":"Json.Decode.Decoder Profile.Profile"}],"binops":[]},{"name":"Route","comment":"\n\n@docs Route, fromUrl, href, replaceUrl\n\n","unions":[{"name":"Route","comment":" ","args":[],"cases":[["Home",[]],["Root",[]],["Login",[]],["Logout",[]],["Register",[]],["Settings",[]],["Article",["Article.Slug.Slug"]],["Profile",["Username.Username"]],["NewArticle",[]],["EditArticle",["Article.Slug.Slug"]]]}],"aliases":[],"values":[{"name":"fromUrl","comment":" ","type":"Url.Url -> Maybe.Maybe Route.Route"},{"name":"href","comment":" ","type":"Route.Route -> Html.Attribute msg"},{"name":"replaceUrl","comment":" ","type":"Browser.Navigation.Key -> Route.Route -> Platform.Cmd.Cmd msg"}],"binops":[]},{"name":"Session","comment":"\n\n\n# Types\n\n@docs Session\n\n\n# Info\n\n@docs cred, navKey, viewer\n\n\n# Changes\n\n@docs changes, fromViewer\n\n","unions":[{"name":"Session","comment":" ","args":[],"cases":[]}],"aliases":[],"values":[{"name":"changes","comment":" ","type":"(Session.Session -> msg) -> Browser.Navigation.Key -> Platform.Sub.Sub msg"},{"name":"cred","comment":" ","type":"Session.Session -> Maybe.Maybe Api.Cred"},{"name":"fromViewer","comment":" ","type":"Browser.Navigation.Key -> Maybe.Maybe Viewer.Viewer -> Session.Session"},{"name":"navKey","comment":" ","type":"Session.Session -> Browser.Navigation.Key"},{"name":"viewer","comment":" ","type":"Session.Session -> Maybe.Maybe Viewer.Viewer"}],"binops":[]},{"name":"Timestamp","comment":"\n\n@docs format, view\n\n","unions":[],"aliases":[],"values":[{"name":"format","comment":" Format a timestamp as a String, like so:\n\n    \"February 14, 2018\"\n\nFor more complex date formatting scenarios, here's a nice package:\n<https://package.elm-lang.org/packages/ryannhg/date-format/latest/>\n\n","type":"Time.Zone -> Time.Posix -> String.String"},{"name":"view","comment":" ","type":"Time.Zone -> Time.Posix -> Html.Html msg"}],"binops":[]},{"name":"Username","comment":"\n\n@docs Username, decoder, encode, toHtml, toString, urlParser\n\n","unions":[{"name":"Username","comment":" ","args":[],"cases":[]}],"aliases":[],"values":[{"name":"decoder","comment":" ","type":"Json.Decode.Decoder Username.Username"},{"name":"encode","comment":" ","type":"Username.Username -> Json.Encode.Value"},{"name":"toHtml","comment":" ","type":"Username.Username -> Html.Html msg"},{"name":"toString","comment":" ","type":"Username.Username -> String.String"},{"name":"urlParser","comment":" ","type":"Url.Parser.Parser (Username.Username -> a) a"}],"binops":[]},{"name":"Viewer","comment":" The logged-in user currently viewing this page. It stores enough data to\nbe able to render the menu bar (username and avatar), along with Cred so it's\nimpossible to have a Viewer if you aren't logged in.\n\n\n# Types\n\n@docs Viewer\n\n\n# Info\n\n@docs avatar, cred, minPasswordChars, username\n\n\n# Serialization\n\n@docs decoder, store\n\n","unions":[{"name":"Viewer","comment":" ","args":[],"cases":[]}],"aliases":[],"values":[{"name":"avatar","comment":" ","type":"Viewer.Viewer -> Avatar.Avatar"},{"name":"cred","comment":" ","type":"Viewer.Viewer -> Api.Cred"},{"name":"decoder","comment":" ","type":"Json.Decode.Decoder (Api.Cred -> Viewer.Viewer)"},{"name":"minPasswordChars","comment":" Passwords must be at least this many characters long!\n","type":"Basics.Int"},{"name":"store","comment":" ","type":"Viewer.Viewer -> Platform.Cmd.Cmd msg"},{"name":"username","comment":" ","type":"Viewer.Viewer -> Username.Username"}],"binops":[]}]